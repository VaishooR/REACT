DESTRUCTURING:

Destructuring makes it easy to extract only what is needed.
Destructuring is extracting elements from an Array or an Object and assinging each of these elements as a value to a varable name.
When destructuring arrays, the order that variables are declared is important.
Object properties do not have to be declared in a specific order.






ARRAY DESTRUCTURING:

Example 1:

 Old way:
 const vehicles = ['mustang', 'f-150', 'expedition'];
 const car = vehicles[0];
 const truck = vehicles[1];
 const suv = vehicles[2];
 
 Using Destructuring:
 const vehicles = ['mustang', 'f-150', 'expedition'];
 const [car, truck, suv] = vehicles;
 






OBJECT DESTRUCTURING:

Example 2:

 Old way:
 
 const vehicleOne = {
  brand: 'Ford',
  model: 'Mustang',
  type: 'car',
  year: 2021, 
  color: 'red'
}

myVehicle(vehicleOne);

function myVehicle(vehicle) {
  const message = 'My ' + vehicle.type + ' is a ' + vehicle.color + ' ' + vehicle.brand + ' ' + vehicle.model + '.';
}


Using destructuring:

const vehicleOne = {
  brand: 'Ford',
  model: 'Mustang',
  type: 'car',
  year: 2021, 
  color: 'red'
}

myVehicle(vehicleOne);

function myVehicle({type, color, brand, model}) {
  const message = 'My ' + type + ' is a ' + color + ' ' + brand + ' ' + model + '.';
}



We can even destructure deeply nested objects by referencing the nested object then using a colon and curly braces 
to again destructure the items needed from the nested object:
 
 
 const vehicleOne = {
  brand: 'Ford',
  model: 'Mustang',
  type: 'car',
  year: 2021, 
  color: 'red',
  registration: {
    city: 'Houston',
    state: 'Texas',
    country: 'USA'
  }
}

myVehicle(vehicleOne)

function myVehicle({ model, registration: { state } }) {
  const message = 'My ' + model + ' is registered in ' + state + '.';
}


